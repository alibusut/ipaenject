name: üöÄ Build Modified iOS App

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: 'üì± ÿ±ÿßÿ®ÿ∑ ŸÖŸÑŸÅ IPA ÿßŸÑÿ£ÿµŸÑŸä (Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸÖŸÅŸÉŸÉ ÿßŸÑÿ™ÿ¥ŸÅŸäÿ±)'
        required: true
        type: string
      
      app_type:
        description: 'üìã ŸÜŸàÿπ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ'
        required: true
        default: 'whatsapp'
        type: choice
        options:
          - youtube
          - instagram  
          - tiktok
          - whatsapp
          - telegram
          - spotify
          - snapchat
          - discord
          - custom
      
      selected_tweaks:
        description: 'üß© ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© (ŸÖŸÅÿµŸàŸÑÿ© ÿ®ŸÅŸàÿßÿµŸÑ)'
        required: false
        default: 'all'
        type: string
      
      bundle_id:
        description: 'üÜî Bundle ID ÿßŸÑÿ¨ÿØŸäÿØ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)'
        required: false
        default: ''
        type: string
      
      display_name:
        description: 'ÔøΩÔøΩ ÿßÿ≥ŸÖ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸÖÿπÿ±Ÿàÿ∂ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)'
        required: false
        default: ''
        type: string
      
      app_version:
        description: 'üî¢ ÿ•ÿµÿØÿßÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)'
        required: false
        default: '1.0.0'
        type: string

jobs:
  build:
    name: üî® Build Modified App
    runs-on: macos-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üõ†Ô∏è Setup Build Environment
        run: |
          echo "üöÄ Setting up build environment..."
          
          # Update Homebrew and install basic tools
          brew update || true
          brew install --quiet ldid unzip zip curl wget
          
          # Install Azule with improved method
          echo "üì¶ Installing Azule..."
          
          # Download and install Azule directly
          curl -L https://github.com/Al4ise/Azule/releases/latest/download/azule -o /usr/local/bin/azule
          chmod +x /usr/local/bin/azule
          
          # Add to PATH
          echo "/usr/local/bin" >> $GITHUB_PATH
          export PATH="/usr/local/bin:$PATH"
          
          # Verify installation
          echo "üîç Verifying tools..."
          which ldid && echo "‚úÖ ldid ready"
          which azule && echo "‚úÖ azule ready" || echo "‚ö†Ô∏è azule not found"
          
          # Create workspace
          mkdir -p build output
          echo "‚úÖ Build environment ready!"
      
      - name: üì± Download Original IPA
        run: |
          echo "‚¨áÔ∏è Downloading original IPA..."
          
          IPA_URL="${{ github.event.inputs.ipa_url }}"
          echo "üìç URL: $IPA_URL"
          
          # Download with user agent to avoid blocks
          curl -L -H "User-Agent: Mozilla/5.0" -o build/original.ipa "$IPA_URL"
          
          # Check if download successful
          if [ ! -f build/original.ipa ]; then
            echo "‚ùå Download failed"
            exit 1
          fi
          
          # Check file size
          FILE_SIZE=$(stat -f%z build/original.ipa 2>/dev/null || echo "0")
          FILE_SIZE_MB=$((FILE_SIZE/1024/1024))
          
          if [ $FILE_SIZE -lt 5242880 ]; then  # Less than 5MB
            echo "‚ö†Ô∏è Warning: File seems small (${FILE_SIZE_MB}MB) - might be an error page"
            head -c 500 build/original.ipa | strings | head -5 || true
          fi
          
          echo "‚úÖ IPA downloaded (${FILE_SIZE_MB}MB)"
      
      - name: üß© Prepare Tweaks
        run: |
          echo "üîç Preparing tweaks for ${{ github.event.inputs.app_type }}..."
          
          APP_TYPE="${{ github.event.inputs.app_type }}"
          SELECTED_TWEAKS="${{ github.event.inputs.selected_tweaks }}"
          
          mkdir -p build/tweaks
          
          # Function to safely copy tweaks
          copy_app_tweaks() {
            local app_path=$1
            if [ -d "$app_path" ]; then
              echo "üìÇ Copying from $app_path"
              find "$app_path" -name "*.dylib" -exec cp {} build/tweaks/ \; 2>/dev/null || true
              find "$app_path" -name "*.framework" -type d -exec cp -r {} build/tweaks/ \; 2>/dev/null || true
            fi
          }
          
          # Copy universal tweaks
          echo "üåê Adding universal tweaks..."
          copy_app_tweaks "tweaks/universal/adblock"
          copy_app_tweaks "tweaks/universal/jailbreak-detection"
          
          # Copy app-specific tweaks
          case $APP_TYPE in
            youtube)
              echo "üì∫ Adding YouTube tweaks..."
              copy_app_tweaks "tweaks/media/youtube"
              ;;
            instagram)
              echo "üì∏ Adding Instagram tweaks..."
              copy_app_tweaks "tweaks/social/instagram"
              ;;
            tiktok)
              echo "üéµ Adding TikTok tweaks..."
              copy_app_tweaks "tweaks/media/tiktok"
              ;;
            whatsapp)
              echo "üí¨ Adding WhatsApp tweaks..."
              copy_app_tweaks "tweaks/social/whatsapp"
              ;;
            telegram)
              echo "‚úàÔ∏è Adding Telegram tweaks..."
              copy_app_tweaks "tweaks/social/telegram"
              ;;
            spotify)
              echo "üé∂ Adding Spotify tweaks..."
              copy_app_tweaks "tweaks/media/spotify"
              ;;
            snapchat)
              echo "üëª Adding Snapchat tweaks..."
              copy_app_tweaks "tweaks/social/snapchat"
              ;;
            discord)
              echo "üéÆ Adding Discord tweaks..."
              copy_app_tweaks "tweaks/social/discord"
              ;;
          esac
          
          # Handle custom selection
          if [ "$SELECTED_TWEAKS" != "all" ] && [ -n "$SELECTED_TWEAKS" ]; then
            echo "üéØ Custom selection: $SELECTED_TWEAKS"
            rm -f build/tweaks/*.dylib
            
            IFS=',' read -ra TWEAKS <<< "$SELECTED_TWEAKS"
            for tweak in "${TWEAKS[@]}"; do
              tweak=$(echo "$tweak" | xargs)
              echo "  ‚ûï Adding: $tweak"
              find tweaks/ -name "*$tweak*" -name "*.dylib" -exec cp {} build/tweaks/ \; 2>/dev/null || true
            done
          fi
          
          # Show what we have
          echo "üìã Final tweak list:"
          if ls build/tweaks/*.dylib 1> /dev/null 2>&1; then
            ls -lh build/tweaks/
            TWEAK_COUNT=$(ls build/tweaks/*.dylib 2>/dev/null | wc -l)
            echo "üî¢ Total tweaks: $TWEAK_COUNT"
          else
            echo "  ‚ö†Ô∏è No .dylib files found"
          fi
      
      - name: üîß Apply Patches
        run: |
          echo "üî® Applying patches..."
          cd build/
          
          # Check for tweaks
          if [ ! "$(ls -A tweaks/ 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è No tweaks found - creating unmodified copy"
            cp original.ipa ../output/modified.ipa
            exit 0
          fi
          
          echo "üíâ Injecting tweaks..."
          
          # Try different azule locations
          AZULE=""
          for path in azule /usr/local/bin/azule ./azule; do
            if command -v "$path" &> /dev/null; then
              AZULE="$path"
              break
            fi
          done
          
          if [ -z "$AZULE" ]; then
            echo "‚ùå Azule not found, creating basic copy"
            cp original.ipa ../output/modified.ipa
            exit 0
          fi
          
          echo "‚úÖ Using azule at: $AZULE"
          
          # Build injection command
          CMD="$AZULE -i original.ipa -o modified.ipa"
          
          # Add display name if provided
          if [ -n "${{ github.event.inputs.display_name }}" ]; then
            CMD="$CMD -n '${{ github.event.inputs.display_name }}'"
          fi
          
          # Add bundle ID if provided
          if [ -n "${{ github.event.inputs.bundle_id }}" ]; then
            CMD="$CMD -b '${{ github.event.inputs.bundle_id }}'"
          fi
          
          # Add version if provided
          if [ -n "${{ github.event.inputs.app_version }}" ]; then
            CMD="$CMD -v '${{ github.event.inputs.app_version }}'"
          fi
          
          # Add all dylib files
          for dylib in tweaks/*.dylib; do
            if [ -f "$dylib" ]; then
              CMD="$CMD -f '$dylib'"
            fi
          done
          
          # Execute injection
          echo "üèÉ‚Äç‚ôÇÔ∏è Executing: $CMD"
          if eval "$CMD"; then
            echo "‚úÖ Injection successful!"
          else
            echo "‚ùå Injection failed, trying basic approach..."
            if eval "$AZULE -i original.ipa -o modified.ipa"; then
              echo "‚úÖ Basic injection worked"
            else
              echo "‚ùå All methods failed, copying original"
              cp original.ipa modified.ipa
            fi
          fi
          
          # Move result
          if [ -f modified.ipa ]; then
            cp modified.ipa ../output/
            echo "‚úÖ Modified IPA ready!"
          else
            echo "‚ùå No output, using original"
            cp original.ipa ../output/modified.ipa
          fi
      
      - name: üîê Sign Application
        run: |
          echo "üñäÔ∏è Signing application..."
          cd output/
          
          # Extract IPA
          unzip -q modified.ipa || { echo "‚ùå Failed to extract"; exit 1; }
          
          # Find app bundle
          APP_PATH=$(find Payload -name "*.app" | head -n1)
          [ -z "$APP_PATH" ] && { echo "‚ùå No app found"; exit 1; }
          
          echo "üì± Signing: $APP_PATH"
          
          # Sign with ldid
          if command -v ldid &> /dev/null; then
            ldid -S "$APP_PATH" && echo "‚úÖ Signed" || echo "‚ö†Ô∏è Sign failed"
          else
            echo "‚ö†Ô∏è ldid not available"
          fi
          
          # Repack
          rm modified.ipa
          zip -rq modified.ipa Payload/
          rm -rf Payload/
          
          echo "‚úÖ Final IPA ready!"
          ls -lh modified.ipa
      
      - name: üìä Generate Build Info
        run: |
          echo "üìã Creating build information..."
          
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          IPA_SIZE=$(stat -f%z output/modified.ipa 2>/dev/null || echo "0")
          IPA_SIZE_MB=$((IPA_SIZE/1024/1024))
          
          cat > output/BUILD_INFO.txt << EOF
üöÄ IPAenject - Build Information
==========================================

üìÖ Build Date: $BUILD_DATE
üì± App Type: ${{ github.event.inputs.app_type }}
üß© Tweaks: ${{ github.event.inputs.selected_tweaks }}
üÜî Bundle ID: ${{ github.event.inputs.bundle_id }}
üìù Display Name: ${{ github.event.inputs.display_name }}
üî¢ Version: ${{ github.event.inputs.app_version }}
üì¶ Size: ${IPA_SIZE_MB}MB
üèóÔ∏è Build: #${{ github.run_number }}

üîó Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

‚ö†Ô∏è IMPORTANT:
‚Ä¢ Personal use only
‚Ä¢ Ensure you own the original app
‚Ä¢ Use AltStore/Sideloadly to install
‚Ä¢ Trust certificate in iOS Settings

üì± Installation:
1. Download modified.ipa
2. Install with sideloading tool
3. Trust developer certificate

üÜò Support:
‚Ä¢ Issues: https://github.com/${{ github.repository }}/issues
‚Ä¢ Discussions: https://github.com/${{ github.repository }}/discussions

Built with ‚ù§Ô∏è using IPAenject
EOF
          
          echo "‚úÖ Build info created"
      
      - name: üì§ Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modified-${{ github.event.inputs.app_type }}-build-${{ github.run_number }}
          path: |
            output/modified.ipa
            output/BUILD_INFO.txt
          retention-days: 30
      
      - name: üéâ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_number }}
          name: "üì± ${{ github.event.inputs.app_type }}++ - Build #${{ github.run_number }}"
          body: |
            ## üöÄ Modified iOS App Build
            
            **üì± App:** ${{ github.event.inputs.app_type }}  
            **üß© Tweaks:** ${{ github.event.inputs.selected_tweaks }}  
            **üìÖ Built:** $(date '+%Y-%m-%d %H:%M UTC')
            
            ### üì• Installation:
            1. Download `modified.ipa` below
            2. Use [AltStore](https://altstore.io) or [Sideloadly](https://sideloadly.io)
            3. Trust certificate in Settings
            
            ### ‚ö†Ô∏è Notes:
            - Personal use only
            - 7-day signing (free) / 365-day (paid developer)
            - Backup your data first
            
            ### üÜò Help:
            Check [Issues](https://github.com/${{ github.repository }}/issues) or [Discussions](https://github.com/${{ github.repository }}/discussions)
            
            ---
            **Built with IPAenject**
          files: |
            output/modified.ipa
            output/BUILD_INFO.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: ‚úÖ Success
        run: |
          echo ""
          echo "üéâ BUILD COMPLETED SUCCESSFULLY! üéâ"
          echo "======================================"
          echo "üì± App: ${{ github.event.inputs.app_type }}"
          echo "üì¶ Output: modified.ipa"
          echo "üîó Download: https://github.com/${{ github.repository }}/releases/latest"
          echo "======================================"
          echo "üöÄ Your modded app is ready!"
